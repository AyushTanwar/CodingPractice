// Construct Binary Tree from Inorder and Postorder Traversal java

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        
        return buildBinaryTree(inorder, inorder.length-1, 0, postorder, postorder.length-1 );
    }
    
    public TreeNode buildBinaryTree(int[] inorder, int inStart, int inEnd, int[] postorder, int postStart) {
        if(inStart<inEnd || postStart <0) {
            return null;
        }
        TreeNode root = new TreeNode(postorder[postStart]);
        int curRootPos = inStart;
        while(inorder[curRootPos] != postorder[postStart]) {
            curRootPos--;
        }
        root.left = buildBinaryTree(inorder, curRootPos-1, inEnd, postorder, postStart-(inStart-curRootPos)-1);
        root.right = buildBinaryTree(inorder, inStart, curRootPos+1, postorder, postStart-1);
        return root;
    }
}
